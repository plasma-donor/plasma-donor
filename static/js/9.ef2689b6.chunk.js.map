{"version":3,"sources":["components/patients/Patients.js","constants/api.js","../node_modules/react-bootstrap/esm/Table.js"],"names":["patientsList","Patients","useState","patients","setPatients","loading","setLoading","message","setMessage","history","useHistory","loggedIn","useContext","loginContext","useEffect","push","Axios","post","API","listPatients","page","size","then","res","data","statusCode","catch","e","DATA","msgError","className","msgPatients","animation","role","variant","responsive","striped","bordered","hover","style","textAlign","map","patient","index","name","email","bloodGroup","mobile","onClick","id","patientId","requestPlasma","renderPatients","env","upload","addPatient","editPatient","updatePatient","listDonors","closeDonationRequest","listDonorsList","Table","React","forwardRef","_ref","ref","bsPrefix","borderless","props","_objectWithoutPropertiesLoose","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","createElement","_extends","responsiveClass"],"mappings":"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","file":"static/js/9.ef2689b6.chunk.js","sourcesContent":["// import logo from \"./logo.svg\";\r\nimport Axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Alert, Spinner, Table } from \"react-bootstrap\";\r\nimport { DATA } from \"../../constants/en\";\r\nimport { API } from \"../../constants/api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { loginContext } from \"../../loginContext\";\r\n\r\nconst patientsList = [];\r\n\r\nconst Patients = () => {\r\n  const [patients, setPatients] = useState(patientsList);\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  let history = useHistory();\r\n  const { loggedIn } = useContext(loginContext);\r\n\r\n  useEffect(() => {\r\n    if (!loggedIn) {\r\n      history.push(\"/login\");\r\n    }\r\n  }, [loggedIn, history]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    Axios.post(`${API.listPatients}`, { page: 1, size: 10 })\r\n      .then((res) => {\r\n        if (res && res.data && res.data.statusCode === 200) {\r\n          setLoading(false);\r\n          if (typeof res.data.data === \"string\") {\r\n            setMessage(res.data.data);\r\n          } else {\r\n            setPatients(res.data.data);\r\n          }\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        setMessage(DATA.msgError);\r\n      });\r\n  }, []);\r\n\r\n  const renderSpinner = () => {\r\n    return (\r\n      <div className=\"text-center\">\r\n        <Spinner animation=\"border\" role=\"status\"></Spinner>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const showMessage = () => {\r\n    return loading ? (\r\n      renderSpinner()\r\n    ) : message ? (\r\n      <Alert variant={\"primary\"}>{message}</Alert>\r\n    ) : null;\r\n  };\r\n\r\n  const sendPlasmaRequest = (patientId) => {\r\n    setLoading(true);\r\n    Axios.post(`${API.requestPlasma}/${patientId}`)\r\n      .then((res) => {\r\n        if (res && res.data && res.data.statusCode === 200) {\r\n          setLoading(false);\r\n          if (typeof res.data.data === \"string\") {\r\n            setMessage(\"Plasma request raised successfully\");\r\n          }\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        setMessage(DATA.msgError);\r\n      });\r\n  };\r\n\r\n  const renderPatients = () => {\r\n    if (patients) {\r\n      return patients.map((patient, index) => {\r\n        return (\r\n          <tr key={patient.id}>\r\n            <td>{index + 1}</td>\r\n            <td>{patient.name}</td>\r\n            <td>{patient.email}</td>\r\n            <td>{patient.bloodGroup}</td>\r\n            <td>{patient.mobile}</td>\r\n            <td style={{ textAlign: \"center\" }}>\r\n              <span\r\n                className=\"link\"\r\n                onClick={() => history.push(`patient/${patient.id}`)}\r\n              >\r\n                Edit\r\n              </span>\r\n              |\r\n              <span\r\n                className=\"link\"\r\n                onClick={() => sendPlasmaRequest(patient.id)}\r\n              >\r\n                Raise Plasma Request\r\n              </span>\r\n            </td>\r\n          </tr>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h4 className=\"text-center mar-top-bot-2rem\">{DATA.msgPatients}</h4>\r\n      <hr />\r\n      {showMessage()}\r\n      <br />\r\n      <Table responsive striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Name</th>\r\n            <th>Email</th>\r\n            <th>Blood Group</th>\r\n            <th>Mobile No</th>\r\n            <th style={{ textAlign: \"center\" }}>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{renderPatients()}</tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Patients;\r\n","export const URL = {\r\n  local: \"http://localhost:8080/\",\r\n  server: \"https://plasma-donor.herokuapp.com/\",\r\n  aws: \"https://plasmadonation-env.eba-hycfdfsp.us-east-2.elasticbeanstalk.com/\",\r\n};\r\n\r\n// const env = URL.server;\r\nconst env = URL.aws;\r\n\r\nexport const API = {\r\n  upload: `${env}api/patient/upload`,\r\n  addPatient: `${env}api/patient/create`,\r\n  editPatient: `${env}api/patient/findById`,\r\n  updatePatient: `${env}api/patient/update`,\r\n  listPatients: `${env}api/patient/findAll`,\r\n  requestPlasma: `${env}api/plasma/request`,\r\n  listDonors: `${env}api/plasma/request/close/getdata`,\r\n  closeDonationRequest: `${env}api/plasma/request/close/submit`,\r\n  listDonorsList: `${env}api/patient/findAllDonors`,\r\n};\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Table = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      striped = _ref.striped,\n      bordered = _ref.bordered,\n      borderless = _ref.borderless,\n      hover = _ref.hover,\n      size = _ref.size,\n      variant = _ref.variant,\n      responsive = _ref.responsive,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"striped\", \"bordered\", \"borderless\", \"hover\", \"size\", \"variant\", \"responsive\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  var classes = classNames(className, decoratedBsPrefix, variant && decoratedBsPrefix + \"-\" + variant, size && decoratedBsPrefix + \"-\" + size, striped && decoratedBsPrefix + \"-striped\", bordered && decoratedBsPrefix + \"-bordered\", borderless && decoratedBsPrefix + \"-borderless\", hover && decoratedBsPrefix + \"-hover\");\n  var table = /*#__PURE__*/React.createElement(\"table\", _extends({}, props, {\n    className: classes,\n    ref: ref\n  }));\n\n  if (responsive) {\n    var responsiveClass = decoratedBsPrefix + \"-responsive\";\n\n    if (typeof responsive === 'string') {\n      responsiveClass = responsiveClass + \"-\" + responsive;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: responsiveClass\n    }, table);\n  }\n\n  return table;\n});\nexport default Table;"],"sourceRoot":""}